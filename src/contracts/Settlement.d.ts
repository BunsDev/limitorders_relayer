/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SettlementInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR1()": FunctionFragment;
    "DOMAIN_SEPARATOR2()": FunctionFragment;
    "RBTC_ADDRESS()": FunctionFragment;
    "WRBTC_ADDRESS()": FunctionFragment;
    "allCanceledHashes()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "cancelMarginOrder((bytes32,uint256,address,uint256,uint256,address,address,uint256,bytes32,uint256,uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "cancelOrder((address,address,address,uint256,uint256,address,uint256,uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "canceledOfHash(bytes32)": FunctionFragment;
    "checkCanceledHashes(bytes32[])": FunctionFragment;
    "checkFilledAmountHashes(bytes32[])": FunctionFragment;
    "deposit(address)": FunctionFragment;
    "fillMarginOrder(((bytes32,uint256,address,uint256,uint256,address,address,uint256,bytes32,uint256,uint256,uint8,bytes32,bytes32)))": FunctionFragment;
    "fillMarginOrders(tuple[])": FunctionFragment;
    "fillOrder(((address,address,address,uint256,uint256,address,uint256,uint256,uint8,bytes32,bytes32),uint256,address[]))": FunctionFragment;
    "fillOrders(tuple[])": FunctionFragment;
    "filledAmountInOfHash(bytes32)": FunctionFragment;
    "minFee()": FunctionFragment;
    "orderBookAddress()": FunctionFragment;
    "orderBookMarginAddress()": FunctionFragment;
    "relayerFeePercent()": FunctionFragment;
    "setMinFee(uint256)": FunctionFragment;
    "sovrynSwapNetwork()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RBTC_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WRBTC_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allCanceledHashes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancelMarginOrder",
    values: [
      {
        loanId: BytesLike;
        leverageAmount: BigNumberish;
        loanTokenAddress: string;
        loanTokenSent: BigNumberish;
        collateralTokenSent: BigNumberish;
        collateralTokenAddress: string;
        trader: string;
        minReturn: BigNumberish;
        loanDataBytes: BytesLike;
        deadline: BigNumberish;
        createdTimestamp: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [
      {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        created: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canceledOfHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCanceledHashes",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkFilledAmountHashes",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fillMarginOrder",
    values: [
      {
        order: {
          loanId: BytesLike;
          leverageAmount: BigNumberish;
          loanTokenAddress: string;
          loanTokenSent: BigNumberish;
          collateralTokenSent: BigNumberish;
          collateralTokenAddress: string;
          trader: string;
          minReturn: BigNumberish;
          loanDataBytes: BytesLike;
          deadline: BigNumberish;
          createdTimestamp: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillMarginOrders",
    values: [
      {
        order: {
          loanId: BytesLike;
          leverageAmount: BigNumberish;
          loanTokenAddress: string;
          loanTokenSent: BigNumberish;
          collateralTokenSent: BigNumberish;
          collateralTokenAddress: string;
          trader: string;
          minReturn: BigNumberish;
          loanDataBytes: BytesLike;
          deadline: BigNumberish;
          createdTimestamp: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          created: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrders",
    values: [
      {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          created: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "filledAmountInOfHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "minFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "orderBookAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderBookMarginAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayerFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sovrynSwapNetwork",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RBTC_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WRBTC_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allCanceledHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelMarginOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canceledOfHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCanceledHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkFilledAmountHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillMarginOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillMarginOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "filledAmountInOfHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderBookAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderBookMarginAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sovrynSwapNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "FeeSplitTransferred(bytes32,address,uint256)": EventFragment;
    "FeeTransferred(bytes32,address,uint256)": EventFragment;
    "MarginOrderCanceled(bytes32,address)": EventFragment;
    "MarginOrderFilled(bytes32,address,uint256,uint256,uint256,address,uint256,uint256,address)": EventFragment;
    "MarginTrade(address,address,uint256,uint256,uint256,uint256,address)": EventFragment;
    "OrderCanceled(bytes32,address)": EventFragment;
    "OrderFilled(bytes32,address,uint256,uint256,address[])": EventFragment;
    "Swap(address,address,uint256,uint256,address)": EventFragment;
    "Withdrawal(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeSplitTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarginOrderCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarginOrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarginTrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber] & { to: string; amount: BigNumber }
>;

export type FeeSplitTransferredEvent = TypedEvent<
  [string, string, BigNumber] & {
    hash: string;
    recipient: string;
    amount: BigNumber;
  }
>;

export type FeeTransferredEvent = TypedEvent<
  [string, string, BigNumber] & {
    hash: string;
    recipient: string;
    amount: BigNumber;
  }
>;

export type MarginOrderCanceledEvent = TypedEvent<
  [string, string] & { hash: string; trader: string }
>;

export type MarginOrderFilledEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    hash: string;
    trader: string;
    principal: BigNumber;
    collateral: BigNumber;
    leverageAmount: BigNumber;
    loanTokenAddress: string;
    loanTokenSent: BigNumber;
    collateralTokenSent: BigNumber;
    collateralTokenAddress: string;
  }
>;

export type MarginTradeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
    loanTokenAddress: string;
    collateralTokenAddress: string;
    leverageAmount: BigNumber;
    collateralTokenSent: BigNumber;
    principalAmount: BigNumber;
    collateralAmount: BigNumber;
    trader: string;
  }
>;

export type OrderCanceledEvent = TypedEvent<
  [string, string] & { hash: string; maker: string }
>;

export type OrderFilledEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string[]] & {
    hash: string;
    maker: string;
    amountIn: BigNumber;
    amountOut: BigNumber;
    path: string[];
  }
>;

export type SwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string] & {
    _sourceToken: string;
    _targetToken: string;
    _sourceTokenAmount: BigNumber;
    _targetTokenAmount: BigNumber;
    _sender: string;
  }
>;

export type WithdrawalEvent = TypedEvent<
  [string, BigNumber] & { receiver: string; amount: BigNumber }
>;

export class Settlement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SettlementInterface;

  functions: {
    DOMAIN_SEPARATOR1(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR2(overrides?: CallOverrides): Promise<[string]>;

    RBTC_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    WRBTC_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    allCanceledHashes(overrides?: CallOverrides): Promise<[string[]]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelMarginOrder(
      order: {
        loanId: BytesLike;
        leverageAmount: BigNumberish;
        loanTokenAddress: string;
        loanTokenSent: BigNumberish;
        collateralTokenSent: BigNumberish;
        collateralTokenAddress: string;
        trader: string;
        minReturn: BigNumberish;
        loanDataBytes: BytesLike;
        deadline: BigNumberish;
        createdTimestamp: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOrder(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        created: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canceledOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkCanceledHashes(
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [([string, boolean] & { hash: string; canceled: boolean })[]] & {
        result: ([string, boolean] & { hash: string; canceled: boolean })[];
      }
    >;

    checkFilledAmountHashes(
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { hash: string; amount: BigNumber })[]] & {
        result: ([string, BigNumber] & { hash: string; amount: BigNumber })[];
      }
    >;

    deposit(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillMarginOrder(
      args: {
        order: {
          loanId: BytesLike;
          leverageAmount: BigNumberish;
          loanTokenAddress: string;
          loanTokenSent: BigNumberish;
          collateralTokenSent: BigNumberish;
          collateralTokenAddress: string;
          trader: string;
          minReturn: BigNumberish;
          loanDataBytes: BytesLike;
          deadline: BigNumberish;
          createdTimestamp: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillMarginOrders(
      args: {
        order: {
          loanId: BytesLike;
          leverageAmount: BigNumberish;
          loanTokenAddress: string;
          loanTokenSent: BigNumberish;
          collateralTokenSent: BigNumberish;
          collateralTokenAddress: string;
          trader: string;
          minReturn: BigNumberish;
          loanDataBytes: BytesLike;
          deadline: BigNumberish;
          createdTimestamp: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOrder(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          created: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOrders(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          created: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    filledAmountInOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    orderBookAddress(overrides?: CallOverrides): Promise<[string]>;

    orderBookMarginAddress(overrides?: CallOverrides): Promise<[string]>;

    relayerFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMinFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sovrynSwapNetwork(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR1(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR2(overrides?: CallOverrides): Promise<string>;

  RBTC_ADDRESS(overrides?: CallOverrides): Promise<string>;

  WRBTC_ADDRESS(overrides?: CallOverrides): Promise<string>;

  allCanceledHashes(overrides?: CallOverrides): Promise<string[]>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  cancelMarginOrder(
    order: {
      loanId: BytesLike;
      leverageAmount: BigNumberish;
      loanTokenAddress: string;
      loanTokenSent: BigNumberish;
      collateralTokenSent: BigNumberish;
      collateralTokenAddress: string;
      trader: string;
      minReturn: BigNumberish;
      loanDataBytes: BytesLike;
      deadline: BigNumberish;
      createdTimestamp: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOrder(
    order: {
      maker: string;
      fromToken: string;
      toToken: string;
      amountIn: BigNumberish;
      amountOutMin: BigNumberish;
      recipient: string;
      deadline: BigNumberish;
      created: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canceledOfHash(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  checkCanceledHashes(
    hashes: BytesLike[],
    overrides?: CallOverrides
  ): Promise<([string, boolean] & { hash: string; canceled: boolean })[]>;

  checkFilledAmountHashes(
    hashes: BytesLike[],
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { hash: string; amount: BigNumber })[]>;

  deposit(
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillMarginOrder(
    args: {
      order: {
        loanId: BytesLike;
        leverageAmount: BigNumberish;
        loanTokenAddress: string;
        loanTokenSent: BigNumberish;
        collateralTokenSent: BigNumberish;
        collateralTokenAddress: string;
        trader: string;
        minReturn: BigNumberish;
        loanDataBytes: BytesLike;
        deadline: BigNumberish;
        createdTimestamp: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillMarginOrders(
    args: {
      order: {
        loanId: BytesLike;
        leverageAmount: BigNumberish;
        loanTokenAddress: string;
        loanTokenSent: BigNumberish;
        collateralTokenSent: BigNumberish;
        collateralTokenAddress: string;
        trader: string;
        minReturn: BigNumberish;
        loanDataBytes: BytesLike;
        deadline: BigNumberish;
        createdTimestamp: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOrder(
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        created: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOrders(
    args: {
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        created: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      };
      amountToFillIn: BigNumberish;
      path: string[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  filledAmountInOfHash(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minFee(overrides?: CallOverrides): Promise<BigNumber>;

  orderBookAddress(overrides?: CallOverrides): Promise<string>;

  orderBookMarginAddress(overrides?: CallOverrides): Promise<string>;

  relayerFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  setMinFee(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sovrynSwapNetwork(overrides?: CallOverrides): Promise<string>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR1(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR2(overrides?: CallOverrides): Promise<string>;

    RBTC_ADDRESS(overrides?: CallOverrides): Promise<string>;

    WRBTC_ADDRESS(overrides?: CallOverrides): Promise<string>;

    allCanceledHashes(overrides?: CallOverrides): Promise<string[]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelMarginOrder(
      order: {
        loanId: BytesLike;
        leverageAmount: BigNumberish;
        loanTokenAddress: string;
        loanTokenSent: BigNumberish;
        collateralTokenSent: BigNumberish;
        collateralTokenAddress: string;
        trader: string;
        minReturn: BigNumberish;
        loanDataBytes: BytesLike;
        deadline: BigNumberish;
        createdTimestamp: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrder(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        created: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    canceledOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkCanceledHashes(
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<([string, boolean] & { hash: string; canceled: boolean })[]>;

    checkFilledAmountHashes(
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { hash: string; amount: BigNumber })[]>;

    deposit(to: string, overrides?: CallOverrides): Promise<void>;

    fillMarginOrder(
      args: {
        order: {
          loanId: BytesLike;
          leverageAmount: BigNumberish;
          loanTokenAddress: string;
          loanTokenSent: BigNumberish;
          collateralTokenSent: BigNumberish;
          collateralTokenAddress: string;
          trader: string;
          minReturn: BigNumberish;
          loanDataBytes: BytesLike;
          deadline: BigNumberish;
          createdTimestamp: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        principalAmount: BigNumber;
        collateralAmount: BigNumber;
      }
    >;

    fillMarginOrders(
      args: {
        order: {
          loanId: BytesLike;
          leverageAmount: BigNumberish;
          loanTokenAddress: string;
          loanTokenSent: BigNumberish;
          collateralTokenSent: BigNumberish;
          collateralTokenAddress: string;
          trader: string;
          minReturn: BigNumberish;
          loanDataBytes: BytesLike;
          deadline: BigNumberish;
          createdTimestamp: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      }[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        principalAmounts: BigNumber[];
        collateralAmounts: BigNumber[];
      }
    >;

    fillOrder(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          created: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillOrders(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          created: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    filledAmountInOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minFee(overrides?: CallOverrides): Promise<BigNumber>;

    orderBookAddress(overrides?: CallOverrides): Promise<string>;

    orderBookMarginAddress(overrides?: CallOverrides): Promise<string>;

    relayerFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    setMinFee(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    sovrynSwapNetwork(overrides?: CallOverrides): Promise<string>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256)"(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    Deposit(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    "FeeSplitTransferred(bytes32,address,uint256)"(
      hash?: BytesLike | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { hash: string; recipient: string; amount: BigNumber }
    >;

    FeeSplitTransferred(
      hash?: BytesLike | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { hash: string; recipient: string; amount: BigNumber }
    >;

    "FeeTransferred(bytes32,address,uint256)"(
      hash?: BytesLike | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { hash: string; recipient: string; amount: BigNumber }
    >;

    FeeTransferred(
      hash?: BytesLike | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { hash: string; recipient: string; amount: BigNumber }
    >;

    "MarginOrderCanceled(bytes32,address)"(
      hash?: BytesLike | null,
      trader?: string | null
    ): TypedEventFilter<[string, string], { hash: string; trader: string }>;

    MarginOrderCanceled(
      hash?: BytesLike | null,
      trader?: string | null
    ): TypedEventFilter<[string, string], { hash: string; trader: string }>;

    "MarginOrderFilled(bytes32,address,uint256,uint256,uint256,address,uint256,uint256,address)"(
      hash?: BytesLike | null,
      trader?: string | null,
      principal?: null,
      collateral?: null,
      leverageAmount?: null,
      loanTokenAddress?: null,
      loanTokenSent?: null,
      collateralTokenSent?: null,
      collateralTokenAddress?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string
      ],
      {
        hash: string;
        trader: string;
        principal: BigNumber;
        collateral: BigNumber;
        leverageAmount: BigNumber;
        loanTokenAddress: string;
        loanTokenSent: BigNumber;
        collateralTokenSent: BigNumber;
        collateralTokenAddress: string;
      }
    >;

    MarginOrderFilled(
      hash?: BytesLike | null,
      trader?: string | null,
      principal?: null,
      collateral?: null,
      leverageAmount?: null,
      loanTokenAddress?: null,
      loanTokenSent?: null,
      collateralTokenSent?: null,
      collateralTokenAddress?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string
      ],
      {
        hash: string;
        trader: string;
        principal: BigNumber;
        collateral: BigNumber;
        leverageAmount: BigNumber;
        loanTokenAddress: string;
        loanTokenSent: BigNumber;
        collateralTokenSent: BigNumber;
        collateralTokenAddress: string;
      }
    >;

    "MarginTrade(address,address,uint256,uint256,uint256,uint256,address)"(
      loanTokenAddress?: string | null,
      collateralTokenAddress?: string | null,
      leverageAmount?: null,
      collateralTokenSent?: null,
      principalAmount?: null,
      collateralAmount?: null,
      trader?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        loanTokenAddress: string;
        collateralTokenAddress: string;
        leverageAmount: BigNumber;
        collateralTokenSent: BigNumber;
        principalAmount: BigNumber;
        collateralAmount: BigNumber;
        trader: string;
      }
    >;

    MarginTrade(
      loanTokenAddress?: string | null,
      collateralTokenAddress?: string | null,
      leverageAmount?: null,
      collateralTokenSent?: null,
      principalAmount?: null,
      collateralAmount?: null,
      trader?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        loanTokenAddress: string;
        collateralTokenAddress: string;
        leverageAmount: BigNumber;
        collateralTokenSent: BigNumber;
        principalAmount: BigNumber;
        collateralAmount: BigNumber;
        trader: string;
      }
    >;

    "OrderCanceled(bytes32,address)"(
      hash?: BytesLike | null,
      maker?: string | null
    ): TypedEventFilter<[string, string], { hash: string; maker: string }>;

    OrderCanceled(
      hash?: BytesLike | null,
      maker?: string | null
    ): TypedEventFilter<[string, string], { hash: string; maker: string }>;

    "OrderFilled(bytes32,address,uint256,uint256,address[])"(
      hash?: BytesLike | null,
      maker?: string | null,
      amountIn?: null,
      amountOut?: null,
      path?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string[]],
      {
        hash: string;
        maker: string;
        amountIn: BigNumber;
        amountOut: BigNumber;
        path: string[];
      }
    >;

    OrderFilled(
      hash?: BytesLike | null,
      maker?: string | null,
      amountIn?: null,
      amountOut?: null,
      path?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string[]],
      {
        hash: string;
        maker: string;
        amountIn: BigNumber;
        amountOut: BigNumber;
        path: string[];
      }
    >;

    "Swap(address,address,uint256,uint256,address)"(
      _sourceToken?: string | null,
      _targetToken?: string | null,
      _sourceTokenAmount?: null,
      _targetTokenAmount?: null,
      _sender?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        _sourceToken: string;
        _targetToken: string;
        _sourceTokenAmount: BigNumber;
        _targetTokenAmount: BigNumber;
        _sender: string;
      }
    >;

    Swap(
      _sourceToken?: string | null,
      _targetToken?: string | null,
      _sourceTokenAmount?: null,
      _targetTokenAmount?: null,
      _sender?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        _sourceToken: string;
        _targetToken: string;
        _sourceTokenAmount: BigNumber;
        _targetTokenAmount: BigNumber;
        _sender: string;
      }
    >;

    "Withdrawal(address,uint256)"(
      receiver?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; amount: BigNumber }
    >;

    Withdrawal(
      receiver?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    DOMAIN_SEPARATOR1(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR2(overrides?: CallOverrides): Promise<BigNumber>;

    RBTC_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    WRBTC_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    allCanceledHashes(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelMarginOrder(
      order: {
        loanId: BytesLike;
        leverageAmount: BigNumberish;
        loanTokenAddress: string;
        loanTokenSent: BigNumberish;
        collateralTokenSent: BigNumberish;
        collateralTokenAddress: string;
        trader: string;
        minReturn: BigNumberish;
        loanDataBytes: BytesLike;
        deadline: BigNumberish;
        createdTimestamp: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOrder(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        created: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canceledOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkCanceledHashes(
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkFilledAmountHashes(
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillMarginOrder(
      args: {
        order: {
          loanId: BytesLike;
          leverageAmount: BigNumberish;
          loanTokenAddress: string;
          loanTokenSent: BigNumberish;
          collateralTokenSent: BigNumberish;
          collateralTokenAddress: string;
          trader: string;
          minReturn: BigNumberish;
          loanDataBytes: BytesLike;
          deadline: BigNumberish;
          createdTimestamp: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillMarginOrders(
      args: {
        order: {
          loanId: BytesLike;
          leverageAmount: BigNumberish;
          loanTokenAddress: string;
          loanTokenSent: BigNumberish;
          collateralTokenSent: BigNumberish;
          collateralTokenAddress: string;
          trader: string;
          minReturn: BigNumberish;
          loanDataBytes: BytesLike;
          deadline: BigNumberish;
          createdTimestamp: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOrder(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          created: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOrders(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          created: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    filledAmountInOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minFee(overrides?: CallOverrides): Promise<BigNumber>;

    orderBookAddress(overrides?: CallOverrides): Promise<BigNumber>;

    orderBookMarginAddress(overrides?: CallOverrides): Promise<BigNumber>;

    relayerFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    setMinFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sovrynSwapNetwork(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RBTC_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WRBTC_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allCanceledHashes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelMarginOrder(
      order: {
        loanId: BytesLike;
        leverageAmount: BigNumberish;
        loanTokenAddress: string;
        loanTokenSent: BigNumberish;
        collateralTokenSent: BigNumberish;
        collateralTokenAddress: string;
        trader: string;
        minReturn: BigNumberish;
        loanDataBytes: BytesLike;
        deadline: BigNumberish;
        createdTimestamp: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      order: {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumberish;
        amountOutMin: BigNumberish;
        recipient: string;
        deadline: BigNumberish;
        created: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canceledOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkCanceledHashes(
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkFilledAmountHashes(
      hashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillMarginOrder(
      args: {
        order: {
          loanId: BytesLike;
          leverageAmount: BigNumberish;
          loanTokenAddress: string;
          loanTokenSent: BigNumberish;
          collateralTokenSent: BigNumberish;
          collateralTokenAddress: string;
          trader: string;
          minReturn: BigNumberish;
          loanDataBytes: BytesLike;
          deadline: BigNumberish;
          createdTimestamp: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillMarginOrders(
      args: {
        order: {
          loanId: BytesLike;
          leverageAmount: BigNumberish;
          loanTokenAddress: string;
          loanTokenSent: BigNumberish;
          collateralTokenSent: BigNumberish;
          collateralTokenAddress: string;
          trader: string;
          minReturn: BigNumberish;
          loanDataBytes: BytesLike;
          deadline: BigNumberish;
          createdTimestamp: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOrder(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          created: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOrders(
      args: {
        order: {
          maker: string;
          fromToken: string;
          toToken: string;
          amountIn: BigNumberish;
          amountOutMin: BigNumberish;
          recipient: string;
          deadline: BigNumberish;
          created: BigNumberish;
          v: BigNumberish;
          r: BytesLike;
          s: BytesLike;
        };
        amountToFillIn: BigNumberish;
        path: string[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    filledAmountInOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderBookAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderBookMarginAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayerFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sovrynSwapNetwork(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
