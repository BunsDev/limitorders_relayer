/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PriceFeedsLocalInterface extends ethers.utils.Interface {
  functions: {
    "amountInEth(address,uint256)": FunctionFragment;
    "baseToken()": FunctionFragment;
    "checkPriceDisagreement(address,address,uint256,uint256,uint256)": FunctionFragment;
    "decimals(address)": FunctionFragment;
    "getCurrentMargin(address,address,uint256,uint256)": FunctionFragment;
    "getCurrentMarginAndCollateralSize(address,address,uint256,uint256)": FunctionFragment;
    "getMaxDrawdown(address,address,uint256,uint256,uint256)": FunctionFragment;
    "globalPricingPaused()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "pricesFeeds(address)": FunctionFragment;
    "protocolTokenEthPrice()": FunctionFragment;
    "queryPrecision(address,address)": FunctionFragment;
    "queryRate(address,address)": FunctionFragment;
    "queryReturn(address,address,uint256)": FunctionFragment;
    "rates(address,address)": FunctionFragment;
    "setDecimals(address[])": FunctionFragment;
    "setGlobalPricingPaused(bool)": FunctionFragment;
    "setPriceFeed(address[],address[])": FunctionFragment;
    "setProtocolTokenEthPrice(uint256)": FunctionFragment;
    "setRates(address,address,uint256)": FunctionFragment;
    "shouldLiquidate(address,address,uint256,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wrbtcToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "amountInEth",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkPriceDisagreement",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getCurrentMargin",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentMarginAndCollateralSize",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxDrawdown",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "globalPricingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pricesFeeds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "protocolTokenEthPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryPrecision",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "queryRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "queryReturn",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rates",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDecimals",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalPricingPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolTokenEthPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRates",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldLiquidate",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wrbtcToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "amountInEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkPriceDisagreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentMarginAndCollateralSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxDrawdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalPricingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricesFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolTokenEthPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryPrecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalPricingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolTokenEthPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wrbtcToken", data: BytesLike): Result;

  events: {
    "GlobalPricingPaused(address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GlobalPricingPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type GlobalPricingPausedEvent = TypedEvent<
  [string, boolean] & { sender: string; isPaused: boolean }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class PriceFeedsLocal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PriceFeedsLocalInterface;

  functions: {
    /**
     * Calculate the rBTC amount equivalent to a given token amount. Native coin on RSK is rBTC. This code comes from Ethereum applications, so Eth refers to 10**18 weis of native coin, i.e.: 1 rBTC.
     * @param amount The amount of tokens to calculate price.
     * @param tokenAddress The address of the token to calculate price.
     * @returns ethAmount The amount of rBTC equivalent.
     */
    amountInEth(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ethAmount: BigNumber }>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Calculate the swap rate between two tokens.	 * Regarding slippage, there is a hardcoded slippage limit of 5%, enforced by this function for all borrowing, lending and margin trading originated swaps performed in the Sovryn exchange.	 * This means all operations in the Sovryn exchange are subject to losing up to 5% from the internal swap performed.
     * @param destAmount The amount of destiny tokens.
     * @param destToken The address of the destiny tokens.
     * @param maxSlippage The maximum slippage limit.
     * @param sourceAmount The amount of source tokens.
     * @param sourceToken The address of the source tokens.
     * @returns sourceToDestSwapRate The swap rate between tokens.
     */
    checkPriceDisagreement(
      sourceToken: string,
      destToken: string,
      sourceAmount: BigNumberish,
      destAmount: BigNumberish,
      maxSlippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sourceToDestSwapRate: BigNumber }>;

    decimals(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * current margin = (total position size - loan) / loan The collateral amount passed as parameter equals the total position size.
     * Calculate the margin of a loan.
     * @param collateralAmount The amount of the collateral.
     * @param collateralToken The address of the collateral token.
     * @param loanAmount The amount of the loan.
     * @param loanToken The address of the loan token.
     * @returns currentMargin The margin of the loan.collateralToLoanRate The price ratio between collateral and  loan tokens.
     */
    getCurrentMargin(
      loanToken: string,
      collateralToken: string,
      loanAmount: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentMargin: BigNumber;
        collateralToLoanRate: BigNumber;
      }
    >;

    /**
     * Calculate the margin and the collateral on rBTC.
     * @param collateralAmount The amount of the collateral.
     * @param collateralToken The address of the collateral token.
     * @param loanAmount The amount of the loan.
     * @param loanToken The address of the loan token.
     * @returns currentMargin The margin of the loan.collateralInEthAmount The amount of collateral on rBTC.
     */
    getCurrentMarginAndCollateralSize(
      loanToken: string,
      collateralToken: string,
      loanAmount: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentMargin: BigNumber;
        collateralInEthAmount: BigNumber;
      }
    >;

    /**
     * Calculate the maximum drawdown of a loan.	 * A drawdown is commonly defined as the decline from a high peak to a pullback low of a specific investment or equity in an account.	 * Drawdown magnitude refers to the amount of value that a user loses during the drawdown period.
     * @param collateralAmount The amount of the collateral.
     * @param collateralToken The address of the collateral token.
     * @param loanAmount The amount of the loan.
     * @param loanToken The address of the loan token.
     * @param margin The relation between the position size and the loan.  margin = (total position size - loan) / loan
     * @returns maxDrawdown The maximum drawdown.
     */
    getMaxDrawdown(
      loanToken: string,
      collateralToken: string,
      loanAmount: BigNumberish,
      collateralAmount: BigNumberish,
      margin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxDrawdown: BigNumber }>;

    globalPricingPaused(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    pricesFeeds(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    protocolTokenEthPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Public wrapper for _getDecimalPrecision internal function.
     * Calculate the relative precision between two tokens.
     * @param destToken The address of the destiny tokens.
     * @param sourceToken The address of the source tokens.
     * @returns The precision ratio source/dest.
     */
    queryPrecision(
      sourceToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Public wrapper for _queryRate internal function.
     * Calculate the price ratio between two tokens.
     * @param destToken The address of the destiny tokens.
     * @param sourceToken The address of the source tokens.
     * @returns rate The price ratio source/dest.precision The ratio precision.
     */
    queryRate(
      sourceToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { rate: BigNumber; precision: BigNumber }
    >;

    /**
     * NOTE: This function returns 0 during a pause, rather than a revert. Ensure calling contracts handle correctly.
     * Price conversor: Calculate the price of an amount of source tokens in destiny token units.
     * @param destToken The address of the destiny tokens.
     * @param sourceAmount The amount of the source tokens.
     * @param sourceToken The address of the source tokens.
     * @returns destAmount The amount of destiny tokens equivalent in price  to the amount of source tokens.
     */
    queryReturn(
      sourceToken: string,
      destToken: string,
      sourceAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { destAmount: BigNumber }>;

    rates(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Populate decimals mapping w/ values from tokens[].decimals
     * @param tokens The array of tokens to loop and get values from.
     */
    setDecimals(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set flag globalPricingPaused
     * @param isPaused The new status of pause (true/false).
     */
    setGlobalPricingPaused(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Populate pricesFeeds mapping w/ values from feeds[]
     * @param feeds The array of contract instances for every token.
     * @param tokens The array of tokens to loop and get addresses.
     */
    setPriceFeed(
      tokens: string[],
      feeds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set new value for protocolTokenEthPrice
     * @param newPrice The new value for protocolTokenEthPrice
     */
    setProtocolTokenEthPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Owner set price ratio between two tokens.
     * @param destToken The address of the destiny tokens.
     * @param rate The price ratio source/dest.
     * @param sourceToken The address of the source tokens.
     */
    setRates(
      sourceToken: string,
      destToken: string,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get assessment about liquidating a loan.
     * @param collateralAmount The amount of the collateral.
     * @param collateralToken The address of the collateral token.
     * @param loanAmount The amount of the loan.
     * @param loanToken The address of the loan token.
     * @param maintenanceMargin The minimum margin before liquidation.
     * @returns True/false to liquidate the loan.
     */
    shouldLiquidate(
      loanToken: string,
      collateralToken: string,
      loanAmount: BigNumberish,
      collateralAmount: BigNumberish,
      maintenanceMargin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrbtcToken(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Calculate the rBTC amount equivalent to a given token amount. Native coin on RSK is rBTC. This code comes from Ethereum applications, so Eth refers to 10**18 weis of native coin, i.e.: 1 rBTC.
   * @param amount The amount of tokens to calculate price.
   * @param tokenAddress The address of the token to calculate price.
   * @returns ethAmount The amount of rBTC equivalent.
   */
  amountInEth(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  /**
   * Calculate the swap rate between two tokens.	 * Regarding slippage, there is a hardcoded slippage limit of 5%, enforced by this function for all borrowing, lending and margin trading originated swaps performed in the Sovryn exchange.	 * This means all operations in the Sovryn exchange are subject to losing up to 5% from the internal swap performed.
   * @param destAmount The amount of destiny tokens.
   * @param destToken The address of the destiny tokens.
   * @param maxSlippage The maximum slippage limit.
   * @param sourceAmount The amount of source tokens.
   * @param sourceToken The address of the source tokens.
   * @returns sourceToDestSwapRate The swap rate between tokens.
   */
  checkPriceDisagreement(
    sourceToken: string,
    destToken: string,
    sourceAmount: BigNumberish,
    destAmount: BigNumberish,
    maxSlippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * current margin = (total position size - loan) / loan The collateral amount passed as parameter equals the total position size.
   * Calculate the margin of a loan.
   * @param collateralAmount The amount of the collateral.
   * @param collateralToken The address of the collateral token.
   * @param loanAmount The amount of the loan.
   * @param loanToken The address of the loan token.
   * @returns currentMargin The margin of the loan.collateralToLoanRate The price ratio between collateral and  loan tokens.
   */
  getCurrentMargin(
    loanToken: string,
    collateralToken: string,
    loanAmount: BigNumberish,
    collateralAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      currentMargin: BigNumber;
      collateralToLoanRate: BigNumber;
    }
  >;

  /**
   * Calculate the margin and the collateral on rBTC.
   * @param collateralAmount The amount of the collateral.
   * @param collateralToken The address of the collateral token.
   * @param loanAmount The amount of the loan.
   * @param loanToken The address of the loan token.
   * @returns currentMargin The margin of the loan.collateralInEthAmount The amount of collateral on rBTC.
   */
  getCurrentMarginAndCollateralSize(
    loanToken: string,
    collateralToken: string,
    loanAmount: BigNumberish,
    collateralAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      currentMargin: BigNumber;
      collateralInEthAmount: BigNumber;
    }
  >;

  /**
   * Calculate the maximum drawdown of a loan.	 * A drawdown is commonly defined as the decline from a high peak to a pullback low of a specific investment or equity in an account.	 * Drawdown magnitude refers to the amount of value that a user loses during the drawdown period.
   * @param collateralAmount The amount of the collateral.
   * @param collateralToken The address of the collateral token.
   * @param loanAmount The amount of the loan.
   * @param loanToken The address of the loan token.
   * @param margin The relation between the position size and the loan.  margin = (total position size - loan) / loan
   * @returns maxDrawdown The maximum drawdown.
   */
  getMaxDrawdown(
    loanToken: string,
    collateralToken: string,
    loanAmount: BigNumberish,
    collateralAmount: BigNumberish,
    margin: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  globalPricingPaused(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Returns true if the caller is the current owner.
   */
  isOwner(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  pricesFeeds(arg0: string, overrides?: CallOverrides): Promise<string>;

  protocolTokenEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Public wrapper for _getDecimalPrecision internal function.
   * Calculate the relative precision between two tokens.
   * @param destToken The address of the destiny tokens.
   * @param sourceToken The address of the source tokens.
   * @returns The precision ratio source/dest.
   */
  queryPrecision(
    sourceToken: string,
    destToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Public wrapper for _queryRate internal function.
   * Calculate the price ratio between two tokens.
   * @param destToken The address of the destiny tokens.
   * @param sourceToken The address of the source tokens.
   * @returns rate The price ratio source/dest.precision The ratio precision.
   */
  queryRate(
    sourceToken: string,
    destToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { rate: BigNumber; precision: BigNumber }
  >;

  /**
   * NOTE: This function returns 0 during a pause, rather than a revert. Ensure calling contracts handle correctly.
   * Price conversor: Calculate the price of an amount of source tokens in destiny token units.
   * @param destToken The address of the destiny tokens.
   * @param sourceAmount The amount of the source tokens.
   * @param sourceToken The address of the source tokens.
   * @returns destAmount The amount of destiny tokens equivalent in price  to the amount of source tokens.
   */
  queryReturn(
    sourceToken: string,
    destToken: string,
    sourceAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rates(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Populate decimals mapping w/ values from tokens[].decimals
   * @param tokens The array of tokens to loop and get values from.
   */
  setDecimals(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set flag globalPricingPaused
   * @param isPaused The new status of pause (true/false).
   */
  setGlobalPricingPaused(
    isPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Populate pricesFeeds mapping w/ values from feeds[]
   * @param feeds The array of contract instances for every token.
   * @param tokens The array of tokens to loop and get addresses.
   */
  setPriceFeed(
    tokens: string[],
    feeds: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set new value for protocolTokenEthPrice
   * @param newPrice The new value for protocolTokenEthPrice
   */
  setProtocolTokenEthPrice(
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Owner set price ratio between two tokens.
   * @param destToken The address of the destiny tokens.
   * @param rate The price ratio source/dest.
   * @param sourceToken The address of the source tokens.
   */
  setRates(
    sourceToken: string,
    destToken: string,
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get assessment about liquidating a loan.
   * @param collateralAmount The amount of the collateral.
   * @param collateralToken The address of the collateral token.
   * @param loanAmount The amount of the loan.
   * @param loanToken The address of the loan token.
   * @param maintenanceMargin The minimum margin before liquidation.
   * @returns True/false to liquidate the loan.
   */
  shouldLiquidate(
    loanToken: string,
    collateralToken: string,
    loanAmount: BigNumberish,
    collateralAmount: BigNumberish,
    maintenanceMargin: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrbtcToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Calculate the rBTC amount equivalent to a given token amount. Native coin on RSK is rBTC. This code comes from Ethereum applications, so Eth refers to 10**18 weis of native coin, i.e.: 1 rBTC.
     * @param amount The amount of tokens to calculate price.
     * @param tokenAddress The address of the token to calculate price.
     * @returns ethAmount The amount of rBTC equivalent.
     */
    amountInEth(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    /**
     * Calculate the swap rate between two tokens.	 * Regarding slippage, there is a hardcoded slippage limit of 5%, enforced by this function for all borrowing, lending and margin trading originated swaps performed in the Sovryn exchange.	 * This means all operations in the Sovryn exchange are subject to losing up to 5% from the internal swap performed.
     * @param destAmount The amount of destiny tokens.
     * @param destToken The address of the destiny tokens.
     * @param maxSlippage The maximum slippage limit.
     * @param sourceAmount The amount of source tokens.
     * @param sourceToken The address of the source tokens.
     * @returns sourceToDestSwapRate The swap rate between tokens.
     */
    checkPriceDisagreement(
      sourceToken: string,
      destToken: string,
      sourceAmount: BigNumberish,
      destAmount: BigNumberish,
      maxSlippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * current margin = (total position size - loan) / loan The collateral amount passed as parameter equals the total position size.
     * Calculate the margin of a loan.
     * @param collateralAmount The amount of the collateral.
     * @param collateralToken The address of the collateral token.
     * @param loanAmount The amount of the loan.
     * @param loanToken The address of the loan token.
     * @returns currentMargin The margin of the loan.collateralToLoanRate The price ratio between collateral and  loan tokens.
     */
    getCurrentMargin(
      loanToken: string,
      collateralToken: string,
      loanAmount: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentMargin: BigNumber;
        collateralToLoanRate: BigNumber;
      }
    >;

    /**
     * Calculate the margin and the collateral on rBTC.
     * @param collateralAmount The amount of the collateral.
     * @param collateralToken The address of the collateral token.
     * @param loanAmount The amount of the loan.
     * @param loanToken The address of the loan token.
     * @returns currentMargin The margin of the loan.collateralInEthAmount The amount of collateral on rBTC.
     */
    getCurrentMarginAndCollateralSize(
      loanToken: string,
      collateralToken: string,
      loanAmount: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentMargin: BigNumber;
        collateralInEthAmount: BigNumber;
      }
    >;

    /**
     * Calculate the maximum drawdown of a loan.	 * A drawdown is commonly defined as the decline from a high peak to a pullback low of a specific investment or equity in an account.	 * Drawdown magnitude refers to the amount of value that a user loses during the drawdown period.
     * @param collateralAmount The amount of the collateral.
     * @param collateralToken The address of the collateral token.
     * @param loanAmount The amount of the loan.
     * @param loanToken The address of the loan token.
     * @param margin The relation between the position size and the loan.  margin = (total position size - loan) / loan
     * @returns maxDrawdown The maximum drawdown.
     */
    getMaxDrawdown(
      loanToken: string,
      collateralToken: string,
      loanAmount: BigNumberish,
      collateralAmount: BigNumberish,
      margin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalPricingPaused(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    pricesFeeds(arg0: string, overrides?: CallOverrides): Promise<string>;

    protocolTokenEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Public wrapper for _getDecimalPrecision internal function.
     * Calculate the relative precision between two tokens.
     * @param destToken The address of the destiny tokens.
     * @param sourceToken The address of the source tokens.
     * @returns The precision ratio source/dest.
     */
    queryPrecision(
      sourceToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Public wrapper for _queryRate internal function.
     * Calculate the price ratio between two tokens.
     * @param destToken The address of the destiny tokens.
     * @param sourceToken The address of the source tokens.
     * @returns rate The price ratio source/dest.precision The ratio precision.
     */
    queryRate(
      sourceToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { rate: BigNumber; precision: BigNumber }
    >;

    /**
     * NOTE: This function returns 0 during a pause, rather than a revert. Ensure calling contracts handle correctly.
     * Price conversor: Calculate the price of an amount of source tokens in destiny token units.
     * @param destToken The address of the destiny tokens.
     * @param sourceAmount The amount of the source tokens.
     * @param sourceToken The address of the source tokens.
     * @returns destAmount The amount of destiny tokens equivalent in price  to the amount of source tokens.
     */
    queryReturn(
      sourceToken: string,
      destToken: string,
      sourceAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rates(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Populate decimals mapping w/ values from tokens[].decimals
     * @param tokens The array of tokens to loop and get values from.
     */
    setDecimals(tokens: string[], overrides?: CallOverrides): Promise<void>;

    /**
     * Set flag globalPricingPaused
     * @param isPaused The new status of pause (true/false).
     */
    setGlobalPricingPaused(
      isPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Populate pricesFeeds mapping w/ values from feeds[]
     * @param feeds The array of contract instances for every token.
     * @param tokens The array of tokens to loop and get addresses.
     */
    setPriceFeed(
      tokens: string[],
      feeds: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set new value for protocolTokenEthPrice
     * @param newPrice The new value for protocolTokenEthPrice
     */
    setProtocolTokenEthPrice(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Owner set price ratio between two tokens.
     * @param destToken The address of the destiny tokens.
     * @param rate The price ratio source/dest.
     * @param sourceToken The address of the source tokens.
     */
    setRates(
      sourceToken: string,
      destToken: string,
      rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get assessment about liquidating a loan.
     * @param collateralAmount The amount of the collateral.
     * @param collateralToken The address of the collateral token.
     * @param loanAmount The amount of the loan.
     * @param loanToken The address of the loan token.
     * @param maintenanceMargin The minimum margin before liquidation.
     * @returns True/false to liquidate the loan.
     */
    shouldLiquidate(
      loanToken: string,
      collateralToken: string,
      loanAmount: BigNumberish,
      collateralAmount: BigNumberish,
      maintenanceMargin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wrbtcToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "GlobalPricingPaused(address,bool)"(
      sender?: string | null,
      isPaused?: boolean | null
    ): TypedEventFilter<
      [string, boolean],
      { sender: string; isPaused: boolean }
    >;

    GlobalPricingPaused(
      sender?: string | null,
      isPaused?: boolean | null
    ): TypedEventFilter<
      [string, boolean],
      { sender: string; isPaused: boolean }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    /**
     * Calculate the rBTC amount equivalent to a given token amount. Native coin on RSK is rBTC. This code comes from Ethereum applications, so Eth refers to 10**18 weis of native coin, i.e.: 1 rBTC.
     * @param amount The amount of tokens to calculate price.
     * @param tokenAddress The address of the token to calculate price.
     * @returns ethAmount The amount of rBTC equivalent.
     */
    amountInEth(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Calculate the swap rate between two tokens.	 * Regarding slippage, there is a hardcoded slippage limit of 5%, enforced by this function for all borrowing, lending and margin trading originated swaps performed in the Sovryn exchange.	 * This means all operations in the Sovryn exchange are subject to losing up to 5% from the internal swap performed.
     * @param destAmount The amount of destiny tokens.
     * @param destToken The address of the destiny tokens.
     * @param maxSlippage The maximum slippage limit.
     * @param sourceAmount The amount of source tokens.
     * @param sourceToken The address of the source tokens.
     * @returns sourceToDestSwapRate The swap rate between tokens.
     */
    checkPriceDisagreement(
      sourceToken: string,
      destToken: string,
      sourceAmount: BigNumberish,
      destAmount: BigNumberish,
      maxSlippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * current margin = (total position size - loan) / loan The collateral amount passed as parameter equals the total position size.
     * Calculate the margin of a loan.
     * @param collateralAmount The amount of the collateral.
     * @param collateralToken The address of the collateral token.
     * @param loanAmount The amount of the loan.
     * @param loanToken The address of the loan token.
     * @returns currentMargin The margin of the loan.collateralToLoanRate The price ratio between collateral and  loan tokens.
     */
    getCurrentMargin(
      loanToken: string,
      collateralToken: string,
      loanAmount: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Calculate the margin and the collateral on rBTC.
     * @param collateralAmount The amount of the collateral.
     * @param collateralToken The address of the collateral token.
     * @param loanAmount The amount of the loan.
     * @param loanToken The address of the loan token.
     * @returns currentMargin The margin of the loan.collateralInEthAmount The amount of collateral on rBTC.
     */
    getCurrentMarginAndCollateralSize(
      loanToken: string,
      collateralToken: string,
      loanAmount: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Calculate the maximum drawdown of a loan.	 * A drawdown is commonly defined as the decline from a high peak to a pullback low of a specific investment or equity in an account.	 * Drawdown magnitude refers to the amount of value that a user loses during the drawdown period.
     * @param collateralAmount The amount of the collateral.
     * @param collateralToken The address of the collateral token.
     * @param loanAmount The amount of the loan.
     * @param loanToken The address of the loan token.
     * @param margin The relation between the position size and the loan.  margin = (total position size - loan) / loan
     * @returns maxDrawdown The maximum drawdown.
     */
    getMaxDrawdown(
      loanToken: string,
      collateralToken: string,
      loanAmount: BigNumberish,
      collateralAmount: BigNumberish,
      margin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalPricingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pricesFeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    protocolTokenEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Public wrapper for _getDecimalPrecision internal function.
     * Calculate the relative precision between two tokens.
     * @param destToken The address of the destiny tokens.
     * @param sourceToken The address of the source tokens.
     * @returns The precision ratio source/dest.
     */
    queryPrecision(
      sourceToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Public wrapper for _queryRate internal function.
     * Calculate the price ratio between two tokens.
     * @param destToken The address of the destiny tokens.
     * @param sourceToken The address of the source tokens.
     * @returns rate The price ratio source/dest.precision The ratio precision.
     */
    queryRate(
      sourceToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * NOTE: This function returns 0 during a pause, rather than a revert. Ensure calling contracts handle correctly.
     * Price conversor: Calculate the price of an amount of source tokens in destiny token units.
     * @param destToken The address of the destiny tokens.
     * @param sourceAmount The amount of the source tokens.
     * @param sourceToken The address of the source tokens.
     * @returns destAmount The amount of destiny tokens equivalent in price  to the amount of source tokens.
     */
    queryReturn(
      sourceToken: string,
      destToken: string,
      sourceAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rates(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Populate decimals mapping w/ values from tokens[].decimals
     * @param tokens The array of tokens to loop and get values from.
     */
    setDecimals(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set flag globalPricingPaused
     * @param isPaused The new status of pause (true/false).
     */
    setGlobalPricingPaused(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Populate pricesFeeds mapping w/ values from feeds[]
     * @param feeds The array of contract instances for every token.
     * @param tokens The array of tokens to loop and get addresses.
     */
    setPriceFeed(
      tokens: string[],
      feeds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set new value for protocolTokenEthPrice
     * @param newPrice The new value for protocolTokenEthPrice
     */
    setProtocolTokenEthPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Owner set price ratio between two tokens.
     * @param destToken The address of the destiny tokens.
     * @param rate The price ratio source/dest.
     * @param sourceToken The address of the source tokens.
     */
    setRates(
      sourceToken: string,
      destToken: string,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Get assessment about liquidating a loan.
     * @param collateralAmount The amount of the collateral.
     * @param collateralToken The address of the collateral token.
     * @param loanAmount The amount of the loan.
     * @param loanToken The address of the loan token.
     * @param maintenanceMargin The minimum margin before liquidation.
     * @returns True/false to liquidate the loan.
     */
    shouldLiquidate(
      loanToken: string,
      collateralToken: string,
      loanAmount: BigNumberish,
      collateralAmount: BigNumberish,
      maintenanceMargin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrbtcToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Calculate the rBTC amount equivalent to a given token amount. Native coin on RSK is rBTC. This code comes from Ethereum applications, so Eth refers to 10**18 weis of native coin, i.e.: 1 rBTC.
     * @param amount The amount of tokens to calculate price.
     * @param tokenAddress The address of the token to calculate price.
     * @returns ethAmount The amount of rBTC equivalent.
     */
    amountInEth(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Calculate the swap rate between two tokens.	 * Regarding slippage, there is a hardcoded slippage limit of 5%, enforced by this function for all borrowing, lending and margin trading originated swaps performed in the Sovryn exchange.	 * This means all operations in the Sovryn exchange are subject to losing up to 5% from the internal swap performed.
     * @param destAmount The amount of destiny tokens.
     * @param destToken The address of the destiny tokens.
     * @param maxSlippage The maximum slippage limit.
     * @param sourceAmount The amount of source tokens.
     * @param sourceToken The address of the source tokens.
     * @returns sourceToDestSwapRate The swap rate between tokens.
     */
    checkPriceDisagreement(
      sourceToken: string,
      destToken: string,
      sourceAmount: BigNumberish,
      destAmount: BigNumberish,
      maxSlippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * current margin = (total position size - loan) / loan The collateral amount passed as parameter equals the total position size.
     * Calculate the margin of a loan.
     * @param collateralAmount The amount of the collateral.
     * @param collateralToken The address of the collateral token.
     * @param loanAmount The amount of the loan.
     * @param loanToken The address of the loan token.
     * @returns currentMargin The margin of the loan.collateralToLoanRate The price ratio between collateral and  loan tokens.
     */
    getCurrentMargin(
      loanToken: string,
      collateralToken: string,
      loanAmount: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Calculate the margin and the collateral on rBTC.
     * @param collateralAmount The amount of the collateral.
     * @param collateralToken The address of the collateral token.
     * @param loanAmount The amount of the loan.
     * @param loanToken The address of the loan token.
     * @returns currentMargin The margin of the loan.collateralInEthAmount The amount of collateral on rBTC.
     */
    getCurrentMarginAndCollateralSize(
      loanToken: string,
      collateralToken: string,
      loanAmount: BigNumberish,
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Calculate the maximum drawdown of a loan.	 * A drawdown is commonly defined as the decline from a high peak to a pullback low of a specific investment or equity in an account.	 * Drawdown magnitude refers to the amount of value that a user loses during the drawdown period.
     * @param collateralAmount The amount of the collateral.
     * @param collateralToken The address of the collateral token.
     * @param loanAmount The amount of the loan.
     * @param loanToken The address of the loan token.
     * @param margin The relation between the position size and the loan.  margin = (total position size - loan) / loan
     * @returns maxDrawdown The maximum drawdown.
     */
    getMaxDrawdown(
      loanToken: string,
      collateralToken: string,
      loanAmount: BigNumberish,
      collateralAmount: BigNumberish,
      margin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalPricingPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricesFeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolTokenEthPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Public wrapper for _getDecimalPrecision internal function.
     * Calculate the relative precision between two tokens.
     * @param destToken The address of the destiny tokens.
     * @param sourceToken The address of the source tokens.
     * @returns The precision ratio source/dest.
     */
    queryPrecision(
      sourceToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Public wrapper for _queryRate internal function.
     * Calculate the price ratio between two tokens.
     * @param destToken The address of the destiny tokens.
     * @param sourceToken The address of the source tokens.
     * @returns rate The price ratio source/dest.precision The ratio precision.
     */
    queryRate(
      sourceToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * NOTE: This function returns 0 during a pause, rather than a revert. Ensure calling contracts handle correctly.
     * Price conversor: Calculate the price of an amount of source tokens in destiny token units.
     * @param destToken The address of the destiny tokens.
     * @param sourceAmount The amount of the source tokens.
     * @param sourceToken The address of the source tokens.
     * @returns destAmount The amount of destiny tokens equivalent in price  to the amount of source tokens.
     */
    queryReturn(
      sourceToken: string,
      destToken: string,
      sourceAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rates(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Populate decimals mapping w/ values from tokens[].decimals
     * @param tokens The array of tokens to loop and get values from.
     */
    setDecimals(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set flag globalPricingPaused
     * @param isPaused The new status of pause (true/false).
     */
    setGlobalPricingPaused(
      isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Populate pricesFeeds mapping w/ values from feeds[]
     * @param feeds The array of contract instances for every token.
     * @param tokens The array of tokens to loop and get addresses.
     */
    setPriceFeed(
      tokens: string[],
      feeds: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set new value for protocolTokenEthPrice
     * @param newPrice The new value for protocolTokenEthPrice
     */
    setProtocolTokenEthPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Owner set price ratio between two tokens.
     * @param destToken The address of the destiny tokens.
     * @param rate The price ratio source/dest.
     * @param sourceToken The address of the source tokens.
     */
    setRates(
      sourceToken: string,
      destToken: string,
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get assessment about liquidating a loan.
     * @param collateralAmount The amount of the collateral.
     * @param collateralToken The address of the collateral token.
     * @param loanAmount The amount of the loan.
     * @param loanToken The address of the loan token.
     * @param maintenanceMargin The minimum margin before liquidation.
     * @returns True/false to liquidate the loan.
     */
    shouldLiquidate(
      loanToken: string,
      collateralToken: string,
      loanAmount: BigNumberish,
      collateralAmount: BigNumberish,
      maintenanceMargin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrbtcToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
